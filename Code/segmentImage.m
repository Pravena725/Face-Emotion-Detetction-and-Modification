function [BW,maskedImage] = segmentImage(RGB)
%segmentImage Segment image using auto-generated code from imageSegmenter app
%  [BW,MASKEDIMAGE] = segmentImage(RGB) segments image RGB using
%  auto-generated code from the imageSegmenter app. The final segmentation
%  is returned in BW, and a masked image is returned in MASKEDIMAGE.

% Auto-generated by imageSegmenter app on 14-Apr-2021
%----------------------------------------------------


% Convert RGB image into L*a*b* color space.
X = rgb2lab(RGB);

% Graph cut
foregroundInd = [7430 7433 7434 7436 7437 7438 7441 7443 7445 7446 7448 7679 7680 7703 7930 7931 7958 7959 8180 8181 8432 8433 8465 8683 8684 8685 8719 8935 8936 8972 9441 9693 9732 9944 10450 10703 10744 10955 11250 11461 11714 11756 11967 12262 12473 12726 12979 13232 13485 13527 13991 14244 14750 15045 15256 15762 15803 16056 16268 16521 16774 17027 17066 17280 17533 17572 18040 18330 18547 18836 19053 19089 19307 19342 19560 19595 20320 20354 20826 20861 21586 21839 21873 22346 22600 22633 22854 23360 23392 23613 23867 23899 24120 24152 24373 24627 24880 24912 25387 25893 25925 26431 26653 26684 26938 27159 27665 27699 28171 28206 28677 29183 29473 29689 30195 30235 30701 30997 31207 31460 31504 31712 31757 31965 32265 32469 32722 33227 33279 33480 33732 33786 34491 34548 34741 34995 35247 35308 35753 35816 36258 36511 36576 36763 37016 37083 37521 37774 38026 38351 38859 39038 39367 39620 39874 40381 40887 41142 41396 41903 42157 42664 43423 43930 44437 44690 45451 46211 47477 48491 49403 49758 50667 51532 51932 52798 53449 54461 54823 54967 55329 55473 55835 55979 56232 56485 56597 56738 56990 57105 57612 58254 58625 60400 60529 61791 62683 63055 63951 64065 64824 65836 66741 66848 68113 68515 69277 69884 70037 70543 71654 72570 72666 73077 73930 74598 74942 75106 75612 75865 76371 76460 76878 77385 77638 77639 77977 78145 78651 78736 79158 79412 79665 80172 80173 80254 80933 81186 81439 81518 82783 83210 83542 84554 84728 85566 86246 86578 87764 88602 89788 91638 91812 92065 92318 92571 92902 93154 93838 93913 94597 94925 96369 97961 98646 99226 99911 100744 101430 102262 102948 104213 104792 105225 106058 106490 107071 107502 108083 109273 109601 110866 111044 111803 112384 112815 113397 113827 114586 114915 116103 116433 117115 117698 117874 118380 118886 118963 119139 120151 120404 120735 120910 121163 121416 122174 122253 122680 123012 123265 123439 124024 124196 125207 125542 126470 128073 128743 129845 130762 131520 131772 131870 132025 134049 134401 135061 135919 136073 136579 137843 137945 139717 139867 141384 141995 142647 143405 143513 144668 145931 146044 146942 147816 147952 148457 148963 149720 150348 150732 151742 152753 152878 153764 154776 155156 156041 156422 156799 157304 157810 158568 158700 159830 159965 160724 160977 161990 162103 163003 164016 165282 165387 166294 166901 167814 168668 169079 169930 170435 170598 170688 171700 172116 172965 173635 174481 175238 175408 175996 177180 177260 178192 178268 178772 179277 179710 179782 180216 180539 180722 181229 181297 182560 182747 183821 184519 184832 185279 185589 186095 186545 186600 187359 187810 188116 188570 188621 189076 189126 189631 189835 190389 190594 191147 191353 191399 191651 191903 192112 192155 192365 192407 192618 192660 193377 193417 193922 194136 194389 194427 194930 195148 195436 195654 195940 196412 196697 197423 197453 197676 197958 198182 198687 198716 198939 198967 199192 199471 199698 199951 199976 200203 200708 200733 200734 200961 200986 201237 201466 201490 201718 201742 202246 202247 202476 202729 202752 202982 203005 203234 203258 203487 203511 203764 203992 204017 204271 204497 204524 205002 205031 205255 205284 205538 205760 205791 206266 206298 206519 207025 207312 207313 207567 207784 208328 208542 208795 208835 209089 209554 209596 209807 210103 210313 210610 210819 210864 211072 211117 211578 211876 212085 212382 212593 212635 212888 213101 213141 213356 213611 213647 213865 214121 214375 214376 214378 214380 214381 214383 214385 214387 214388 214389 214392 214393 214395 214396 214398 214399 214401 214402 214403 214404 214405 214406 ];
backgroundInd = [1361 1365 1368 1370 1373 1375 1376 1377 1379 1380 1382 1383 1387 1390 1391 1393 1394 1395 1396 1398 1399 1400 1401 1402 1608 1611 1656 1657 1658 1659 1856 1858 1913 1915 1917 1920 1921 1922 1923 2101 2103 2104 2107 2177 2349 2350 2351 2352 2353 2434 2435 2594 2598 2599 2600 2691 2829 2833 2837 2838 2840 2842 2945 2947 2948 2949 3076 3078 3079 3080 3203 3327 3457 3578 3579 3712 3829 3830 3966 4219 4220 4331 4332 4333 4474 4582 4583 4728 4982 5236 5490 5744 5842 5998 6253 6346 6507 6599 6761 6762 6852 7015 7016 7270 7524 7611 7777 7778 8370 8876 9888 11154 13322 13359 13360 13361 13362 13363 13684 13863 13869 14080 14113 14363 14839 15092 15116 15345 15384 15855 15863 15960 17909 19247 19424 19928 20434 20687 20942 21015 21460 21466 21469 21470 21472 21520 21773 22279 22991 23291 24556 24762 25568 25774 26785 26834 28553 28605 29564 30575 31388 31586 31839 32600 32654 33614 34375 34678 36148 36654 36957 37666 38931 39437 40704 41210 41259 42223 42729 43235 43488 43741 44501 45054 45262 46275 46528 47035 48303 48344 49063 49570 50076 50584 51343 51850 52356 52610 52899 53369 54382 55141 55648 56154 56188 56407 56947 57166 58686 59698 59729 60711 61470 62483 62762 63014 63242 63519 63772 64509 65015 65036 65774 66280 66301 66786 67039 67292 67312 68304 69083 69569 70582 71341 71360 71847 72859 73384 73619 73872 74378 74649 74885 75138 75897 76167 76403 76656 76909 77162 77179 77668 78444 79186 79202 79945 79961 80198 81210 81731 81969 82982 83249 83741 84261 85272 85512 86284 86524 87283 87549 88548 89067 89307 90319 90585 90825 91078 91836 92609 93101 95377 96151 96642 98160 98919 98934 100436 101210 101448 101715 101954 102207 102221 102460 102713 102727 102966 103233 103486 103725 104231 104245 105243 105510 106255 106522 106761 107014 107281 108026 108293 109038 109053 109290 110571 110808 112326 112343 113591 113608 114114 114367 114856 114873 115868 115885 117133 117150 118398 118921 119410 120169 120439 120928 122193 123475 124218 126256 126761 127508 127772 128278 128531 128784 129533 129543 130049 130292 131314 132316 132579 133591 134350 135352 135362 135868 136880 137629 137892 138651 139400 139662 140421 140918 140927 141433 141939 142445 142942 143456 143954 144467 144966 144973 145479 145732 146238 146484 146998 147496 148264 149265 149530 150782 151048 152553 152822 156366 157104 157885 158368 159656 159909 160162 160415 160668 160922 161175 161402 161934 162440 163958 164435 165223 165699 165729 166235 166488 166741 166993 167246 167721 167752 168478 168511 168729 169523 170239 171041 171802 172308 172561 172814 173518 173573 174839 175851 176292 176611 177117 177370 177624 179143 181423 182097 184463 185883 186996 189462 189466 189471 189712 189981 190033 190235 190236 191184 191251 191804 192235 192771 193069 193963 194079 194585 194721 195049 195227 195342 196240 196528 197869 198015 198338 199791 199816 201822 201915 202634 203613 203940 204361 204401 205631 205712 206420 206902 206906 206978 207175 207664 207920 208174 208175 208430 208433 208750 209189 210204 211222 211984 212040 212239 212240 212495 212748 213052 213256 213441 213694 213812 214016 214199 214200 214572 214705 215028 215078 215212 215465 215718 215971 215974 216037 216223 216345 216474 216482 216979 217047 217106 217232 217248 217360 217483 217614 217615 217757 217869 218123 218124 218239 218268 218304 218380 218487 218488 218491 218522 218523 218634 218729 218732 218737 218981 219034 219143 219144 219224 219231 219309 219398 219400 219475 219655 219800 219803 219805 219911 219972 219974 219975 219976 219977 220170 220173 220219 220220 220223 220430 220433 220438 220441 220464 220469 220701 220705 220710 220713 ];
L = superpixels(X,1225,'IsInputLab',true);

% Convert L*a*b* range to [0 1]
scaledX = prepLab(X);
BW = lazysnapping(scaledX,L,foregroundInd,backgroundInd);

% Create masked image.
maskedImage = RGB;
maskedImage(repmat(~BW,[1 1 3])) = 0;
end

function out = prepLab(in)

% Convert L*a*b* image to range [0,1]
out = in;
out(:,:,1) = in(:,:,1) / 100;  % L range is [0 100].
out(:,:,2) = (in(:,:,2) + 86.1827) / 184.4170;  % a* range is [-86.1827,98.2343].
out(:,:,3) = (in(:,:,3) + 107.8602) / 202.3382;  % b* range is [-107.8602,94.4780].

end
